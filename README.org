#+TITLE: There's no place like $HOME

This repo contains the configuration files for my work setup. It uses [[https://www.gnu.org/software/stow/][GNU Stow]] to link the files
into the $HOME directory and utilizes [[https://github.com/plexus/chemacs2][Chemacs2]] to easily switch between [[https://www.gnu.org/software/emacs/][GNU Emacs]] configurations -
whether for debug or development. I strive for literate programming via Org-mode and continue to
hope that [[https://github.com/hlissner/doom-emacs][Doom Emacs]] will be my configuration framework one day.

* Installation
To facilitate linking of files from this repo to the $HOME directory, ensure =stow= is available.

#+BEGIN_SRC sh
  sudo apt install stow
#+END_SRC

As this repo contains submodules, clone using the following command to retrieve all necessary files.
#+BEGIN_SRC sh
  cd ~
  git clone git@github.com:nhaas/dotfiles.git dotfiles --recursive
#+END_SRC

Once complete, load the files into the $HOME directory.
#+BEGIN_SRC sh
  cd dotfiles
  stow .
#+END_SRC

* Stow
#+BEGIN_QUOTE
GNU Stow is a symlink farm manager which takes distinct packages of software and/or data located in
separate directories on the filesystem, and makes them appear to be installed in the same place.

...

This is particularly useful for keeping track of system-wide and per-user installations of software
built from source, but [[http://brandon.invergo.net/news/2012-05-26-using-gnu-stow-to-manage-your-dotfiles.html][can also facilitate a more controlled approach to management of configuration
files in the user's home directory]], especially when [[http://lists.gnu.org/archive/html/info-stow/2011-12/msg00000.html][coupled with version control systems]].
#+END_QUOTE
Briefly, it creates symlinks from this cloned repo to its parent directory for both files and
directories contained within.

[[https://alexpearce.me/2016/02/managing-dotfiles-with-stow/][Managing dotfiles with GNU stow]] was helpful to understand this concept.

* Chemacs2
#+BEGIN_QUOTE
Chemacs 2 is an Emacs profile switcher, it makes it easy to run multiple Emacs configurations side by side.

Think of it as a bootloader for Emacs.
#+END_QUOTE
The obvious successor to [[https://github.com/plexus/chemacs][chemacs]], allows for switching between the profiles listed in
[[file:.emacs-profiles.el][.emacs-profiles.el]].

By default, the profile whose name matches the contents of [[file:.emacs-profile][.emacs-profile]] will be
chosen. Alternatively, the user may provide the profile name on the command line using
=--withprofile foo=. See [[https://github.com/plexus/chemacs2#usage][Usage]] or [[https://systemcrafters.cc/emacs-tips/multiple-configurations-with-chemacs2][this helpful System Crafters article]] for more info.

* Emacs Configurations
I am constantly tinkering with my Emacs configuration (probably too much) and love the flexibility
that Chemacs2 (see [[#chemacs2][above]]) affords me. I also strive for meaningful documntation - for myself and any
reader. The following table outlines the different configurations contained in this repo.

| *Name*     | *Profile*    | *Configuration*    | *Default* | *Bash Alias* |
|------------+--------------+--------------------+-----------+--------------|
| [[#legacy][Legacy]]     | =legacy=     | [[file:emacs/config/legacy/myinit.org][legacy/myinit.org]]  | Yes       | =e=          |
| [[#evil-basic][Evil Basic]] | =evil-basic= | [[file:emacs/config/evil-basic/init.el][evil-basic/init.el]] | No        | =eb=         |
| [[#modern][Modern]]     | =modern=     | [[file:emacs/config/modern/config.org][modern/config.org]]  | No        | =me=         |
| [[#doom][Doom]]       | =doom=       | [[file:emacs/config/doom/init.el][doom/init.el]]       | No        | =de=         |

One quirkly aspect of these '[[https://wikemacs.org/wiki/Package.el][package.el]]'-based configurations is that they all download and install
ELisp packages to a shared directory. This is atypical for Emacs, but it helps keep each
configuration clean and allows for different configurations to use the same downloaded packages.

** Legacy
My current config is a frankenstein of packages, customizations, and workarounds that I have
employed over the years for ASIC design, scripting, and software development. I hope to find time to
start anew and possibly switch to Doom altogether.

** Evil Basic
A simple configuration for the native =vi= user who wants to dip a toe into Emacs or just wants the
Org file to do its thing without much setup. It includes =org-mode= and =plantuml-mode=.

** Modern
Rediscover Emacs with a more modern approach. Test advanced features and pave the way towards more
powerful frameworks like Doom or Spacemacs.
1) [X] =use-package= to organize packages.
2) [X] Literate Programming (i.e. Org file)
   - [X] Auto-tangle on save https://youtu.be/kkqVTDbfYp4?t=1371
   - [X] [[https://github.com/snosov1/toc-org][Table of Contents]]
3) [X] House-keeping
   - [X] [[https://github.com/emacscollective/no-littering][no-littering]]
   - [X] auto-update-packages
   - [X] Keep various files out of the config
   - [X] eliminate custom.el altogether
4) [-] Keybindings
   - [-] Evil
     - [X] evil-surround
     - [X] evil-nerd-commenter
     - [X] evil-matchit
     - [ ] targets.el?
     - [ ] evil-args?
     - [ ] evil-cleverparens?
     - [ ] evil-escape?
     - [ ] evil-exchange?
     - [ ] evil-snipe?
     - [ ] evil-easymotion?
     - [ ] evil-goggles?
     - [ ] goto-chg?
     - [ ] evil-vimish-fold?
     - [ ] evil-collection?
   - [ ] general.el?
   - [ ] Hydra?
5) [ ] Non-GUI IDE-like features
   - [ ] ripgrip
   - [ ] magit
   - [ ] Completion framework
   - [ ] snippets
   - [ ] projectile
   - [ ] undo-tree
   - etc.
6) [ ] Emacs client/daemon
   - [ ] With X11 forwarding, similar experience to terminal Emacs inside tmux?
7) [ ] GUI Features
   - [ ] treemacs
   - [ ] lsp-mode
   - [ ] dap-mode?
   - [ ] Company?
   - [ ] flycheck/flyspell?
8) [ ] Beautify
   - [ ] rainbow delimiters
   - [ ] ligatures?
   - [ ] icons?
   - [ ] fonts?
9) [ ] Emacs 28
   - [ ] =undo-redo=. What's that all about?

** Doom?

** Straight.el?

** Doom

*** Introduction
#+begin_quote
Doom is a configuration framework for GNU Emacs tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.
#+end_quote

Doom does things differently as a bit more hands-off. In exchange for less fine-tune control over your configuration, you can leverage the knowledge and work of many others.

There is no "stable" branch and I don't know how often releases are made, so I have included it as a submodule to this repository for stability.

*** Usage
Because Doom uses [[https://github.com/raxod502/straight.el][straight.el]] as its package manager, be sure to run =doom sync= whenever changes are made to the configuration. The [[https://github.com/hlissner/doom-emacs/blob/master/docs/getting_started.org#the-bindoom-utility][documentation]] specificies to "run this whenver you modify the =doom!= block or =packages.el= file."

=DOOMDIR= must also be set when invoking =doom= command (e.g. =doom sync=) from the shell/terminal. Chemacs sets =DOOMDIR= environment variable when loading Emacs, but this will not affect shell commands.

*** Prerequisites
At this time, Doom requires the following to work properly:
1) Git 2.23+
   - To install latest Git (Ubuntu)
     #+BEGIN_SRC sh
       sudo add-apt-repository ppa:git-core/ppa
       sudo apt update
       sudo apt install git
     #+END_SRC

2) Emacs 27.1 (27.2 is recommended, or native-comp. 29+ is not supported).
3) ripgrep 11.0+
4) GNU =find=
5) OPTIONAL: fd 7.3.0+ (improves file indexing performance for some commands)

*** TODO-list
- [ ] evil-surround not recognizing ("<" . ">") pairs?
- [ ] Doom modules `use-package` :hook not working for ibuffer-hook (group buffers by projectile root)
- [ ] Point does not always return to original place before invokation of my-replace-all

** Straight.el?

* Miscellaneous
SSH connections to =github.com= appear to be completely blocked by the firewall. Only HTTPS
connections are allowed for =push= / =pull=. For =push= ing to this repo, you will need a [[https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token][Personal
Access Token (PAT)]] because username/password are disallowed for security reasons. Substitute the PAT
for the normal password when git requests username/password.

To make this less painful, we can setup git to store/cache the passwords for some amount of time.
#+BEGIN_SRC sh
git config --global credential.helper 'cache --timeout=10000000'
#+END_SRC
This solution is not ideal because the cache will expire after ~4 months. Alt
